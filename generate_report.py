#!/usr/bin/env python3
"""
Enhanced Report Generator with PDF Support
Creates comprehensive reports including all sections displayed in the frontend
"""

import json
import os
from pathlib import Path

def generate_comprehensive_report():
    """Generate a comprehensive report with all available data"""
    
    # Load all available data
    try:
        # Analysis data
        with open('documents/summary_and_risks.json', 'r', encoding='utf-8') as f:
            analysis = json.load(f)
        
        # Clauses with entities
        clauses_file = 'documents/clauses_with_entities.json'
        clauses = []
        if os.path.exists(clauses_file):
            with open(clauses_file, 'r', encoding='utf-8') as f:
                clauses = json.load(f)
                
        # Segmented clauses
        segments_file = 'documents/segmented_clauses.json'
        segments = []
        if os.path.exists(segments_file):
            with open(segments_file, 'r', encoding='utf-8') as f:
                segments = json.load(f)
                
    except Exception as e:
        print(f"Error loading data: {e}")
        return None
    
    # Generate comprehensive markdown
    lines = []
    lines.append("# Contract Analysis Report")
    lines.append("")
    lines.append("*Generated by Dynamite Legal AI*")
    lines.append("")
    
    # Executive Summary
    lines.append("## Executive Summary")
    exec_summary = analysis.get("executive_summary", [])
    if isinstance(exec_summary, list):
        for item in exec_summary:
            lines.append(f"- {item}")
    else:
        lines.append(f"{exec_summary}")
    lines.append("")
    
    # Key Terms
    lines.append("## Key Terms")
    key_terms = analysis.get("key_terms", {})
    if isinstance(key_terms, dict):
        # Handle complex key terms structure
        if key_terms.get("parties"):
            lines.append(f"**Parties:** {', '.join(key_terms['parties'])}")
        if key_terms.get("effective_date"):
            lines.append(f"**Effective Date:** {key_terms['effective_date']}")
        else:
            lines.append("**Effective Date:** Not specified")
        if key_terms.get("term"):
            lines.append(f"**Term:** {key_terms['term']}")
        else:
            lines.append("**Term:** Not specified")
        if key_terms.get("governing_law"):
            lines.append(f"**Governing Law:** {key_terms['governing_law']}")
        else:
            lines.append("**Governing Law:** Not specified")
        if key_terms.get("payment_terms"):
            lines.append(f"**Payment Terms:** {key_terms['payment_terms']}")
        if key_terms.get("other_notable"):
            for item in key_terms["other_notable"]:
                lines.append(f"**Notable:** {item}")
    elif isinstance(key_terms, list):
        for term in key_terms:
            lines.append(f"- {term}")
    lines.append("")
    
    # Risk Analysis
    lines.append("## Risk Analysis")
    risks = analysis.get("risks", [])
    if risks:
        for risk in risks:
            severity = risk.get("severity", "medium").upper()
            title = risk.get("title", risk.get("clause_title", "General Risk"))
            lines.append(f"### [{severity}] {title}")
            
            if risk.get("clause_title") and risk.get("clause_title") != title:
                lines.append(f"**Clause:** {risk['clause_title']}")
            
            if risk.get("rationale"):
                lines.append(f"**Risk:** {risk['rationale']}")
            
            if risk.get("snippet"):
                lines.append(f"**Text Snippet:** \"{risk['snippet']}\"")
            lines.append("")
    else:
        lines.append("No significant risks identified.")
        lines.append("")
    
    # Contract Clauses & Entities
    lines.append("## Contract Clauses & Extracted Entities")
    if clauses:
        for i, clause in enumerate(clauses, 1):
            lines.append(f"### {i}. {clause.get('clause_title', 'Untitled Clause')}")
            
            # Clause text (truncated for readability)
            clause_text = clause.get('clause_text', 'No text available')
            if len(clause_text) > 300:
                clause_text = clause_text[:300] + "..."
            lines.append(f"**Text:** {clause_text}")
            
            # Entities
            entities = clause.get('entities', [])
            if entities:
                lines.append("**Extracted Entities:**")
                entity_groups = {}
                for entity in entities:
                    label = entity.get('label', entity.get('entity_type', 'OTHER'))
                    text = entity.get('text', '')
                    if label not in entity_groups:
                        entity_groups[label] = []
                    if text not in entity_groups[label]:
                        entity_groups[label].append(text)
                
                for label, texts in entity_groups.items():
                    lines.append(f"- **{label}:** {', '.join(texts)}")
            lines.append("")
    else:
        lines.append("No clause data available.")
        lines.append("")
    
    # Recommendations
    lines.append("## Recommendations")
    recommendations = analysis.get("recommendations", [])
    if recommendations:
        for i, rec in enumerate(recommendations, 1):
            lines.append(f"{i}. {rec}")
    else:
        lines.append("No specific recommendations at this time.")
    lines.append("")
    
    # Open Questions
    lines.append("## Open Questions")
    questions = analysis.get("open_questions", [])
    if questions:
        for i, question in enumerate(questions, 1):
            lines.append(f"{i}. {question}")
    else:
        lines.append("No open questions identified.")
    lines.append("")
    
    # Footer
    lines.append("---")
    lines.append("*This report was generated using AI-powered contract analysis.*")
    lines.append("*Please review with legal counsel for important decisions.*")
    
    return "\n".join(lines)

def save_comprehensive_report():
    """Save the comprehensive report to markdown file"""
    report_content = generate_comprehensive_report()
    if report_content:
        output_file = Path("documents/comprehensive_report.md")
        output_file.write_text(report_content, encoding='utf-8')
        print(f"Comprehensive report saved to: {output_file}")
        return str(output_file)
    return None

if __name__ == "__main__":
    save_comprehensive_report()
